generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id               String        @id @default(uuid())
  fullName         String
  email            String        @unique
  phone            Int
  dateOfBirth      DateTime?
  addressLine1     String?
  city             String?
  state            String?
  country          String?
  gender           Gender
  password         String
  documentUrl      String
  documentNumber   String
  isVerified       Boolean       @default(false)
  verificationCode Int
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  userID           appointment[] @relation("PatientID")
}

model admin {
  id           String    @id @default(uuid())
  fullName     String
  email        String    @unique
  phone        String
  dateOfBirth  DateTime?
  addressLine1 String?
  city         String?
  state        String?
  country      String?
  gender       Gender
  password     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model doctor {
  id             String        @id @default(uuid())
  fullName       String
  email          String        @unique
  phone          String
  dateOfBirth    DateTime?
  addressLine1   String?
  city           String?
  state          String?
  country        String?
  gender         Gender
  specialization String
  about          String?
  avatarUrl      String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  appointment    appointment[] @relation("DoctorID")
}

model appointment {
  id        String            @id @default(uuid())
  patientID String
  reason    String
  note      String?
  status    AppointmentStatus @default(PENDING)
  doctorId  String?
  startTime DateTime
  endTime   DateTime
  patientid user              @relation("PatientID", fields: [patientID], references: [id])
  doctorid  doctor?            @relation("DoctorID", fields: [doctorId], references: [id])
}

enum Gender {
  MALE
  FEMALE
}

enum AppointmentStatus {
  PENDING
  CONFIRM
}
